{"version":3,"sources":["components/question/Question.js","components/answer/Answer.js","components/QuizMain.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","question","Answer","answers","Object","keys","answer","map","qAnswer","i","className","correctAnswer","clickedAnswer","onClick","checkAnswer","key","disabled","Quiz","state","quiestions","1","2","3","4","5","correctAnswers","step","score","setState","nextStep","this","finalresult","src","width","height","frameBorder","class","allowFullScreen","length","id","Component","App","subtitle","React","useState","modalIsOpen","setIsOpen","isPlaying","setIsPlaying","renderTime","remainingTime","duration","colors","onComplete","isOpen","onAfterOpen","style","color","onRequestClose","content","top","left","right","bottom","marginRight","transform","contentLabel","ref","_subtitle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac311d91.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Question.css';\r\n\r\nconst Question = (props) => {\r\n    return (\r\n        <h1>{props.question}</h1>\r\n    );\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport './Answer.css';\r\n\r\nconst Answer = (props) => {\r\n    let answers = Object.keys(props.answer)\r\n        .map((qAnswer, i) => (\r\n            <li\r\n            className=\r\n            {\r\n                props.correctAnswer === qAnswer ?\r\n                'correct' : \r\n                props.clickedAnswer === qAnswer ? \r\n                'incorrect' : ''\r\n            }\r\n            onClick={() => props.checkAnswer(qAnswer)}\r\n            key={qAnswer}>\r\n                {props.answer[qAnswer]}\r\n            </li>\r\n        ));\r\n\r\n        return (\r\n            <>\r\n                <ul disabled={props.clickedAnswer ? true : false} className=\"Answers\">\r\n                    {answers}\r\n                </ul>\r\n            </>\r\n        );\r\n}\r\n\r\nexport default Answer;","import React, {Component} from 'react';\r\nimport Question from './question/Question';\r\nimport Answer from './answer/Answer';\r\nimport './QuizMain.css';\r\nexport default class Quiz extends Component {\r\n\r\n    // initiating the local state\r\n    state = {\r\n        quiestions: {\r\n            1: 'Q1: MS-Word is an example of _____',\r\n            2: 'Q2: Ctrl, Shift and Alt are called .......... keys.',\r\n            3: 'Q3: A computer cannot \"boot\" if it does not have the _____',\r\n            4: 'Q4: Who is the father of Computers?',\r\n            5: 'Q5: What is Google'\r\n        },\r\n        answers: {\r\n            1: {\r\n                1: 'An operating system',\r\n                2: 'A processing device',\r\n                3: 'Application software'\r\n            },\r\n            2: {\r\n                1: 'modifier',\r\n                2: 'function',\r\n                3: 'alphanumeric'\r\n            },\r\n            3: {\r\n                1: 'Compiler',\r\n                2: 'Loader',\r\n                3: 'Operating system'\r\n            },\r\n            4: {\r\n                1: 'Charles Babbage',\r\n                2: 'Jimmy Henderson',\r\n                3: 'Mark Zuckerberg'\r\n            },\r\n            5: {\r\n                1: 'Web Browser',\r\n                2: 'Search Engine',\r\n                3: 'Internet'\r\n            }\r\n        },\r\n        correctAnswers: {\r\n            1: '3',\r\n            2: '1',\r\n            3: '3',\r\n            4: '1',\r\n            5: '2'\r\n        },\r\n        correctAnswer: 0,\r\n        clickedAnswer: 0,\r\n        step: 1,\r\n        score: 0,\r\n    }\r\n\r\n    // the method that checks the correct answer\r\n    checkAnswer = answer => {\r\n        const { correctAnswers, step, score } = this.state;\r\n        if(answer === correctAnswers[step]){\r\n            this.setState({\r\n                score: score + 1,\r\n                correctAnswer: correctAnswers[step],\r\n                clickedAnswer: answer\r\n                \r\n            });\r\n        }else{\r\n            this.setState({\r\n                correctAnswer: 0,\r\n                clickedAnswer: answer\r\n            });\r\n        }\r\n    }\r\n\r\n    // method to move to the next question\r\n    nextStep = (step) => {\r\n        this.setState({\r\n            step: step + 1,\r\n            correctAnswer: 0,\r\n            clickedAnswer: 0\r\n        });\r\n    }\r\n\r\n    render(){\r\n        let { quiestions, answers, correctAnswer, clickedAnswer, step, score } = this.state;\r\n        var finalresult = (score >= 3) ? <iframe src=\"https://giphy.com/embed/3otPoS81loriI9sO8o\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>  : <iframe src=\"https://giphy.com/embed/USE5vWQyWQvHxVmNIb\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe> ;\r\n        return(\r\n            <div className=\"Content\">\r\n                {step <= Object.keys(quiestions).length ? \r\n                    (<>\r\n                        <Question\r\n                            question={quiestions[step]}\r\n\r\n                        />\r\n                        <Answer\r\n                            answer={answers[step]}\r\n                            step={step}\r\n                            checkAnswer={this.checkAnswer}\r\n                            correctAnswer={correctAnswer}\r\n                            clickedAnswer={clickedAnswer}\r\n                        />\r\n                        <button\r\n                        className=\"NextStep\"\r\n                        disabled={\r\n                            clickedAnswer && Object.keys(quiestions).length >= step\r\n                            ? false : true\r\n                        }\r\n                        onClick={() => this.nextStep(step)}>Next</button>\r\n                    </>) : (\r\n                        <div className=\"finalPage\" id=\"Completed\">\r\n                            <h1>You have completed the quiz!</h1>\r\n                            <p>Your score is: {score} of {Object.keys(quiestions).length}</p>\r\n                            <p>Thank you!</p>\r\n                            {finalresult}\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport './App.css';\r\nimport Quiz from './components/QuizMain';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\n\r\nfunction App() {\r\nconst customStyles = {\r\n    content : {\r\n      top                   : '50%',\r\n      left                  : '50%',\r\n      right                 : 'auto',\r\n      bottom                : 'auto',\r\n      marginRight           : '-50%',\r\n      transform             : 'translate(-50%, -50%)'\r\n    }\r\n  };\r\n  const [modalIsOpen,setIsOpen] = React.useState(true);\r\n  const [isPlaying, setIsPlaying] = React.useState(false);\r\n  const renderTime = ({ remainingTime }) => {\r\n    if (remainingTime == 0) {\r\n      return <div className=\"timer\">Time's Up</div>;\r\n    }\r\n    return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Remaining</div>\r\n        <div className=\"value\">{remainingTime}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n    );\r\n  };\r\n  function StartQuiz () {\r\n    setIsPlaying(true);\r\n    setIsOpen(false);\r\n  }\r\n  var subtitle;\r\n\r\n  function afterOpenModal() {\r\n    // references are now sync'd and can be accessed.\r\n    subtitle.style.color = '#f00';\r\n  }\r\n\r\n  function closeModal(){\r\n    setIsOpen(false);\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"Heading\">You got a minute to win it!🕒</h1>\r\n      <div className=\"timer-wrapper\">\r\n        <CountdownCircleTimer\r\n          isPlaying = {isPlaying}\r\n          duration={60}\r\n          colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n          onComplete={() => [false, 1000]}\r\n        >\r\n          {renderTime}\r\n        </CountdownCircleTimer>\r\n      </div>\r\n    <Quiz />\r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onAfterOpen={afterOpenModal}\r\n          onRequestClose={closeModal}\r\n          style={customStyles}\r\n          contentLabel=\"Example Modal\"\r\n        >\r\n\r\n          <h2 ref={_subtitle => (subtitle = _subtitle)}>Hello, this is a simple quiz with a timer. You've just one minute to complete the quiz.</h2>\r\n          <button  className=\"Button\" onClick={StartQuiz}>Start Quiz</button>\r\n        </Modal>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}